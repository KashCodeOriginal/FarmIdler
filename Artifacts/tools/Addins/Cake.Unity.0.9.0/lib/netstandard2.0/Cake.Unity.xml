<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.Unity</name>
    </assembly>
    <members>
        <member name="M:Cake.Unity.UnityAliases.UnityEditor(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Unity.UnityEditorArguments)">
            <summary>
            Executes Unity Editor via command-line interface.
            </summary>
            <param name="unityEditorPath">Path to Unity Editor executable.</param>
            <param name="arguments">Unity Editor command-line arguments.</param>
            <example>
            <code>
            var unityEditor = FindUnityEditor(2018, 3) ?? throw new Exception("Cannot find Unity Editor 2018.3.");
            
            UnityEditor(unityEditor.Path, new UnityEditorArguments
            {
                ProjectPath = "A:/UnityProject",
                BuildWindowsPlayer = "A:/Build/game.exe",
                LogFile = "A:/Build/unity.log",
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Unity.UnityAliases.UnityEditor(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Unity.UnityEditorArguments,Cake.Unity.UnityEditorSettings)">
            <summary>
            Executes Unity Editor via command-line interface.
            </summary>
            <param name="unityEditorPath">Path to Unity Editor executable.</param>
            <param name="arguments">Unity Editor command-line arguments.</param>
            <param name="settings">Settings which affect how Unity Editor should be executed.</param>
            <example>
            <code>
            var unityEditor = FindUnityEditor(2018, 3) ?? throw new Exception("Cannot find Unity Editor 2018.3.");
            
            UnityEditor(
                unityEditor.Path,
                new UnityEditorArguments
                {
                    ProjectPath = "A:/UnityProject",
                    BuildWindowsPlayer = "A:/Build/game.exe",
                    LogFile = "A:/Build/unity.log",
                },
                new UnityEditorSettings
                {
                    RealTimeLog = true,
                });
            </code>
            </example>
        </member>
        <member name="M:Cake.Unity.UnityAliases.UnityEditor(Cake.Core.ICakeContext,Cake.Unity.UnityEditorDescriptor,Cake.Unity.UnityEditorArguments,Cake.Unity.UnityEditorSettings)">
            <summary>
            Executes Unity Editor via command-line interface.
            </summary>
            <param name="unityEditor">Unity Editor descriptor provided by a FindUnityEditor method.</param>
            <param name="arguments">Unity Editor command-line arguments.</param>
            <param name="settings">Optional settings which affect how Unity Editor should be executed.</param>
            <example>
            <code>
            UnityEditor(
                FindUnityEditor(2018, 3) ?? throw new Exception("Cannot find Unity Editor 2018.3."),
                new UnityEditorArguments
                {
                    ProjectPath = "A:/UnityProject",
                    BuildWindowsPlayer = "A:/Build/game.exe",
                    LogFile = "A:/Build/unity.log",
                },
                new UnityEditorSettings
                {
                    RealTimeLog = true,
                });
            </code>
            </example>
        </member>
        <member name="M:Cake.Unity.UnityAliases.UnityEditor(Cake.Core.ICakeContext,System.Int32,System.Int32,System.Int32,System.Char,System.Int32,Cake.Unity.UnityEditorArguments,Cake.Unity.UnityEditorSettings)">
            <summary>
            <para>Executes Unity Editor via command-line interface.</para>
            <para>Determines Unity Editor location automatically by specified version.</para>
            </summary>
            <param name="versionYear">Year part of Unity version aka major version.</param>
            <param name="versionStream">Stream part of Unity version aka minor version.</param>
            <param name="versionUpdate">Update part of Unity version.</param>
            <param name="versionSuffixCharacter">Stage part of Unity version. "a" - mean Alpha, "b" - Beta, "p" - Patch, "f" - Final</param>
            <param name="versionSuffixNumber">SuffixNumber part of Unity version.</param>
            <param name="arguments">Unity Editor command-line arguments.</param>
            <param name="settings">Optional settings which affect how Unity Editor should be executed.</param>
            <example>
            <code>
            UnityEditor(
                2018, 3, 14, 'f', 1,
                new UnityEditorArguments
                {
                    ProjectPath = "A:/UnityProject",
                    BuildWindowsPlayer = "A:/Build/game.exe",
                    LogFile = "A:/Build/unity.log",
                },
                new UnityEditorSettings
                {
                    RealTimeLog = true,
                });
            </code>
            </example>
        </member>
        <member name="M:Cake.Unity.UnityAliases.UnityEditor(Cake.Core.ICakeContext,System.Int32,System.Int32,System.Int32,System.Char,Cake.Unity.UnityEditorArguments,Cake.Unity.UnityEditorSettings)">
            <summary>
            <para>Executes Unity Editor via command-line interface.</para>
            <para>Determines Unity Editor location automatically by specified version.</para>
            </summary>
            <param name="versionYear">Year part of Unity version aka major version.</param>
            <param name="versionStream">Stream part of Unity version aka minor version.</param>
            <param name="versionUpdate">Update part of Unity version.</param>
            <param name="versionSuffixCharacter">Stage part of Unity version. "a" - mean Alpha, "b" - Beta, "p" - Patch, "f" - Final</param>
            <param name="arguments">Unity Editor command-line arguments.</param>
            <param name="settings">Optional settings which affect how Unity Editor should be executed.</param>
            <example>
            <code>
            UnityEditor(
                2018, 3, 14, 'f',
                new UnityEditorArguments
                {
                    ProjectPath = "A:/UnityProject",
                    BuildWindowsPlayer = "A:/Build/game.exe",
                    LogFile = "A:/Build/unity.log",
                },
                new UnityEditorSettings
                {
                    RealTimeLog = true,
                });
            </code>
            </example>
        </member>
        <member name="M:Cake.Unity.UnityAliases.UnityEditor(Cake.Core.ICakeContext,System.Int32,System.Int32,System.Int32,Cake.Unity.UnityEditorArguments,Cake.Unity.UnityEditorSettings)">
            <summary>
            <para>Executes Unity Editor via command-line interface.</para>
            <para>Determines Unity Editor location automatically by specified version.</para>
            </summary>
            <param name="versionYear">Year part of Unity version aka major version.</param>
            <param name="versionStream">Stream part of Unity version aka minor version.</param>
            <param name="versionUpdate">Update part of Unity version.</param>
            <param name="arguments">Unity Editor command-line arguments.</param>
            <param name="settings">Optional settings which affect how Unity Editor should be executed.</param>
            <example>
            <code>
            UnityEditor(
                2018, 3, 14,
                new UnityEditorArguments
                {
                    ProjectPath = "A:/UnityProject",
                    BuildWindowsPlayer = "A:/Build/game.exe",
                    LogFile = "A:/Build/unity.log",
                },
                new UnityEditorSettings
                {
                    RealTimeLog = true,
                });
            </code>
            </example>
        </member>
        <member name="M:Cake.Unity.UnityAliases.UnityEditor(Cake.Core.ICakeContext,System.Int32,System.Int32,Cake.Unity.UnityEditorArguments,Cake.Unity.UnityEditorSettings)">
            <summary>
            <para>Executes Unity Editor via command-line interface.</para>
            <para>Determines Unity Editor location automatically by specified version.</para>
            </summary>
            <param name="versionYear">Year part of Unity version aka major version.</param>
            <param name="versionStream">Stream part of Unity version aka minor version.</param>
            <param name="arguments">Unity Editor command-line arguments.</param>
            <param name="settings">Optional settings which affect how Unity Editor should be executed.</param>
            <example>
            <code>
            UnityEditor(
                2018, 3,
                new UnityEditorArguments
                {
                    ProjectPath = "A:/UnityProject",
                    BuildWindowsPlayer = "A:/Build/game.exe",
                    LogFile = "A:/Build/unity.log",
                },
                new UnityEditorSettings
                {
                    RealTimeLog = true,
                });
            </code>
            </example>
        </member>
        <member name="M:Cake.Unity.UnityAliases.UnityEditor(Cake.Core.ICakeContext,System.Int32,Cake.Unity.UnityEditorArguments,Cake.Unity.UnityEditorSettings)">
            <summary>
            <para>Executes Unity Editor via command-line interface.</para>
            <para>Determines Unity Editor location automatically by specified version.</para>
            </summary>
            <param name="versionYear">Year part of Unity version aka major version.</param>
            <param name="arguments">Unity Editor command-line arguments.</param>
            <param name="settings">Optional settings which affect how Unity Editor should be executed.</param>
            <example>
            <code>
            UnityEditor(
                2018,
                new UnityEditorArguments
                {
                    ProjectPath = "A:/UnityProject",
                    BuildWindowsPlayer = "A:/Build/game.exe",
                    LogFile = "A:/Build/unity.log",
                },
                new UnityEditorSettings
                {
                    RealTimeLog = true,
                });
            </code>
            </example>
        </member>
        <member name="M:Cake.Unity.UnityAliases.UnityEditor(Cake.Core.ICakeContext,Cake.Unity.UnityEditorArguments,Cake.Unity.UnityEditorSettings)">
            <summary>
            <para>Executes Unity Editor via command-line interface.</para>
            <para>Determines location of latest available Unity Editor automatically.</para>
            </summary>
            <param name="arguments">Unity Editor command-line arguments.</param>
            <param name="settings">Optional settings which affect how Unity Editor should be executed.</param>
            <example>
            <code>
            UnityEditor(
                new UnityEditorArguments
                {
                    ProjectPath = "A:/UnityProject",
                    BuildWindowsPlayer = "A:/Build/game.exe",
                    LogFile = "A:/Build/unity.log",
                },
                new UnityEditorSettings
                {
                    RealTimeLog = true,
                });
            </code>
            </example>
        </member>
        <member name="M:Cake.Unity.UnityAliases.FindUnityEditor(Cake.Core.ICakeContext)">
            <summary>
            Locates installed Unity Editor with latest version.
            </summary>
            <returns>Descriptor of Unity Editor or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown for non-Windows platforms.</exception>
            <example>
            <code>
            var editor = FindUnityEditor();
            if (editor != null)
                Information("Found Unity Editor {0} at path {1}", editor.Version, editor.Path);
            else
                Warning("Cannot find Unity Editor");
            </code>
            </example>
        </member>
        <member name="M:Cake.Unity.UnityAliases.FindUnityEditor(Cake.Core.ICakeContext,System.Int32)">
            <summary>
            <para>Locates installed Unity Editor by version (year).</para>
            <para>If more than one Unity Editor satisfies specified version, then latest one is returned.</para>
            </summary>
            <param name="year">Year part of Unity version (aka major version).</param>
            <returns>Descriptor of Unity Editor or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown for non-Windows platforms.</exception>
            <example>
            <code>
            var editor = FindUnityEditor(2018);
            if (editor != null)
                Information("Found Unity Editor {0} at path {1}", editor.Version, editor.Path);
            else
                Warning("Cannot find Unity Editor 2018");
            </code>
            </example>
        </member>
        <member name="M:Cake.Unity.UnityAliases.FindUnityEditor(Cake.Core.ICakeContext,System.Int32,System.Int32)">
            <summary>
            <para>Locates installed Unity Editor by version (year and stream).</para>
            <para>If more than one Unity Editor satisfies specified version, then latest one is returned.</para>
            </summary>
            <param name="year">Year part of Unity version aka major version.</param>
            <param name="stream">Stream part of Unity version (aka minor version). Usually 1, 2 and 3 mean tech stream while 4 is long term support.</param>
            <returns>Descriptor of Unity Editor or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown for non-Windows platforms.</exception>
            <example>
            <code>
            var editor = FindUnityEditor(2018, 3);
            if (editor != null)
                Information("Found Unity Editor {0} at path {1}", editor.Version, editor.Path);
            else
                Warning("Cannot find Unity Editor 2018.3");
            </code>
            </example>
        </member>
        <member name="M:Cake.Unity.UnityAliases.FindUnityEditor(Cake.Core.ICakeContext,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Locates installed Unity Editor by version (year, stream and update).</para>
            <para>If more than one Unity Editor satisfies specified version, then latest one is returned.</para>
            </summary>
            <param name="year">Year part of Unity version aka major version.</param>
            <param name="stream">Stream part of Unity version (aka minor version). Usually 1, 2 and 3 mean tech stream while 4 is long term support.</param>
            <param name="update">Update part of Unity version.</param>
            <returns>Descriptor of Unity Editor or null.</returns>
            <example>
            <code>
            var editor = FindUnityEditor(2018, 3);
            if (editor != null)
                Information("Found Unity Editor {0} at path {1}", editor.Version, editor.Path);
            else
                Warning("Cannot find Unity Editor 2018.3");
            </code>
            </example>
        </member>
        <member name="M:Cake.Unity.UnityAliases.FindUnityEditor(Cake.Core.ICakeContext,System.Int32,System.Int32,System.Int32,System.Char)">
            <summary>
            <para>Locates installed Unity Editor by version (year, stream, update and stage).</para>
            <para>If more than one Unity Editor satisfies specified version, then latest one is returned.</para>
            </summary>
            <param name="year">Year part of Unity version aka major version.</param>
            <param name="stream">Stream part of Unity version (aka minor version). Usually 1, 2 and 3 mean tech stream while 4 is long term support.</param>
            <param name="update">Update part of Unity version.</param>
            <param name="suffixCharacter">Stage part of Unity version. "a" - mean Alpha, "b" - Beta, "p" - Patch, "f" - Final</param>
            <returns>Descriptor of Unity Editor or null.</returns>
            <example>
            <code>
            var editor = FindUnityEditor(2018, 3, 14, 'f');
            if (editor != null)
                Information("Found Unity Editor {0} at path {1}", editor.Version, editor.Path);
            else
                Warning("Cannot find Unity Editor 2018.3");
            </code>
            </example>
        </member>
        <member name="M:Cake.Unity.UnityAliases.FindUnityEditor(Cake.Core.ICakeContext,System.Int32,System.Int32,System.Int32,System.Char,System.Int32)">
            <summary>
            Locates installed Unity Editor by full version.
            </summary>
            <param name="year">Year part of Unity version aka major version.</param>
            <param name="stream">Stream part of Unity version (aka minor version). Usually 1, 2 and 3 mean tech stream while 4 is long term support.</param>
            <param name="update">Update part of Unity version.</param>
            <param name="suffixCharacter">Stage part of Unity version. "a" - mean Alpha, "b" - Beta, "p" - Patch, "f" - Final</param>
            <param name="suffixNumber">SuffixNumber part of Unity version.</param>
            <returns>Descriptor of Unity Editor or null.</returns>
            <example>
            <code>
            var editor = FindUnityEditor(2018, 3, 14, 'f', 1);
            if (editor != null)
                Information("Found Unity Editor {0} at path {1}", editor.Version, editor.Path);
            else
                Warning("Cannot find Unity Editor 2018.3");
            </code>
            </example>
        </member>
        <member name="M:Cake.Unity.UnityAliases.FindUnityEditors(Cake.Core.ICakeContext)">
            <summary>
            Locates installed Unity Editors.
            </summary>
            <returns>Collection of found Unity Editors (path and version info).</returns>
            <exception cref="T:System.NotSupportedException">Thrown for non-Windows platforms.</exception>
            <example>
            <code>
            foreach (var editor in FindUnityEditors())
                Information("Found Unity Editor {0} at path {1}", editor.Version, editor.Path);
            </code>
            </example>
        </member>
        <member name="T:Cake.Unity.UnityEditorArguments">
            <summary>
            Command-line arguments accepted by Unity Editor.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.AssetServerUpdate">
            <summary>
            Force an update of the project in the Asset Server given by IP:port. The port is optional, and if not given it is assumed to be the standard one (10733). It is advisable to use this command in conjunction with the -projectPath argument to ensure you are working with the correct project. If you don’t give a project name, then the command line uses the last project opened by Unity. If no project exists at the path -projectPath gives, then the command line creates one automatically.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.BatchMode">
            <summary>
            <para>Run Unity in batch mode. You should always use this in conjunction with the other command line arguments, because it ensures no pop-up windows appear and eliminates the need for any human intervention. When an exception occurs during execution of the script code, the Asset server updates fail, or other operations fail, Unity immediately exits with return code 1. </para>
            <para>Note that in batch mode, Unity sends a minimal version of its log output to the console. However, the Log Files still contain the full log information. You cannot open a project in batch mode while the Editor has the same project open; only a single instance of Unity can run at a time. </para>
            <para>Tip: To check whether you are running the Editor or Standalone Player in batch mode, use the Application.isBatchMode operator. </para>
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.BuildLinux32Player">
            <summary>
            Build a 32-bit standalone Linux player (for example, -buildLinux32Player path/to/your/build).
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.BuildLinux64Player">
            <summary>
            Build a 64-bit standalone Linux player (for example, -buildLinux64Player path/to/your/build)
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.BuildLinuxUniversalPlayer">
            <summary>
            Build a combined 32-bit and 64-bit standalone Linux player (for example, -buildLinuxUniversalPlayer path/to/your/build)
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.BuildOSXPlayer">
            <summary>
            Build a 32-bit standalone Mac OSX player (for example, -buildOSXPlayer path/to/your/build.app)
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.BuildOSX64Player">
            <summary>
            Build a 64-bit standalone Mac OSX player (for example, -buildOSX64Player path/to/your/build.app)
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.BuildOSXUniversalPlayer">
            <summary>
            Build a combined 32-bit and 64-bit standalone Mac OSX player (for example, -buildOSXUniversalPlayer path/to/your/build.app)
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.BuildTarget">
            <summary>
            Allows the selection of an active build target before loading a project.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.BuildWindowsPlayer">
            <summary>
            Build a 32-bit standalone Windows player (for example, -buildWindowsPlayer path/to/your/build.exe).
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.BuildWindows64Player">
            <summary>
            Build a 64-bit standalone Windows player (for example, -buildWindows64Player path/to/your/build.exe)
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.StackTraceLogType">
            <summary>
            Detailed debugging feature. StackTraceLogging allows you to allow detailed logging. (for example, -stackTraceLogType Full)
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.CacheServerIPAddress">
            <summary>
            Connect to the specified Cache Server on startup, overriding any configuration stored in the Editor Preferences.
            Set string as host:port
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.CreateProject">
            <summary>
            Create an empty project at the given path.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.EditorTestsCategories">
            <summary>
            Filter editor tests by categories. Separate test categories with a comma.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.EditorTestsFilter">
            <summary>
            Filter editor tests by names. Separate test names with a comma.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.TestResults">
            <summary>
            Path location to place the result file. If the path is a folder, the command line uses a default file name. If not specified, it places the results in the project’s root folder.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.ExecuteMethod">
            <summary>
            Execute the static method as soon as Unity opens the project, and after the optional Asset server update is complete. You can use this to do tasks such as continous integration, performing Unit Tests, making builds or preparing data. To return an error from the command line process, either throw an exception which causes Unity to exit with return code 1, or call EditorApplication.Exit with a non-zero return code. To pass parameters, add them to the command line and retrieve them inside the function using System.Environment.GetCommandLineArgs. To use -executeMethod, you need to place the enclosing script in an Editor folder. The method you execute must be defined as static.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.ExportPackage">
            <summary>
            Export a package, given a path (or set of given paths). Asset paths are set relative to the Unity project root.
            Currently, this option only exports whole folders at a time. You normally need to use this command with the -projectPath argument.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.ForceD3D11">
            <summary>
            Windows only. Make the Editor use Direct3D 11 for rendering. Normally the graphics API depends on Player settings(typically defaults to D3D11).
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.ForceDeviceIndex">
            <summary>
            MacOS only. When using Metal, make the Editor use a particular GPU device by passing it the index of that GPU.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.ForceGfxMetal">
            <summary>
            MacOS only. Make the Editor use Metal as the default graphics API.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.ForceGLCore">
            <summary>
            Make the Editor use OpenGL core profile for rendering.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.ForceGLES">
            <summary>
            Windows only. Make the Editor use OpenGL for Embedded Systems for rendering.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.ForceClamped">
            <summary>
            Used with -force-glcoreXY to prevent checking for additional OpenGL extensions, allowing it to run between platforms with the same code paths.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.ForceFree">
            <summary>
            Make the Editor run as if there is a free Unity license on the machine, even if a Unity Pro license is installed.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.ForceLowPowerDevice">
            <summary>
            MacOS only. When using Metal, make the Editor use a low power device.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.ImportPackage">
            <summary>
            Import the given package. No import dialog is shown.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.LogFile">
            <summary>
            Specify where the Editor or Windows/Linux/OSX standalone log file are written. If the path is ommitted, OSX and Linux will write output to the console. Windows uses the path %LOCALAPPDATA%\Unity\Editor\Editor.log as a default.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.NoGraphics">
            <summary>
            When running in batch mode, do not initialize the graphics device at all. This makes it possible to run your automated workflows on machines that don’t even have a GPU (automated workflows only work when you have a window in focus, otherwise you can’t send simulated input commands). Note that -nographics does not allow you to bake GI, because Enlighten requires GPU acceleration.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.NoUPM">
            <summary>
            Disables the Unity Package Manager.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.Password">
            <summary>
            Enter a password into the log-in form during activation of the Unity Editor.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.ProjectPath">
            <summary>
            Open the project at the given path.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.Quit">
            <summary>
            Quit the Unity Editor after other commands have finished executing. Note that this can cause error messages to be hidden (however, they still appear in the Editor.log file).
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.ReturnLicense">
            <summary>
            Return the currently active license to the license server. Please allow a few seconds before the license file is removed, because Unity needs to communicate with the license server.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.RunTests">
            <summary>
            Run all your test by your TestPlatform;
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.TestPlatform">
            <summary>
            Allows the selection of an active test platform.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.Serial">
            <summary>
            Activate Unity with the specified serial key. It is good practice to pass the -batchmode and -quit arguments as well, in order to quit Unity when done, if using this for automated activation of Unity. Please allow a few seconds before the license file is created, because Unity needs to communicate with the license server. Make sure that license file folder exists, and has appropriate permissions before running Unity with this argument. If activation fails, see the Editor.log for info.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.SetDefaultPlatformTextureFormat">
            <summary>
            Supported only on Android. Sets the default texture compression to the desired format before importing a texture or building the project. This is so you don’t have to import the texture again with the format you want.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.SilentCrashes">
            <summary>
            Prevent Unity from displaying the dialog that appears when a Standalone Player crashes. This argument is useful when you want to run the Player in automated builds or tests, where you don’t want a dialog prompt to obstruct automation.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.Username">
            <summary>
            Enter a username into the log-in form during activation of the Unity Editor.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.DisableAssemblyUpdater">
            <summary>
            Specify a space-separated list of assembly names as parameters for Unity to ignore on automatic updates. Pass empty array to ignore all assemblies.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.AcceptAPIUpdate">
            <summary>
            Use this command line option to specify that APIUpdater should run when Unity is launched in batch mode. Omitting this command line argument when launching Unity in batch mode results in APIUpdater not running which can lead to compiler errors. Note that in versions prior to 2017.2 there’s no way to not run APIUpdater when Unity is launched in batch mode.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.Custom">
            <summary>
            <para>Custom arguments which can further be processed in Unity Editor script by calling System.Environment.GetCommandLineArgs method. </para>
            <para>They are supplied among other arguments in format "--key=value". </para>
            <para>Expected to be used in conjunction with ExecuteMethod argument. </para>
            </summary>
            <example>
            <code>
            var arguments = new UnityEditorArguments { ExecuteMethod = "Build.RunCommandLineBuild" };
            arguments.Custom.buildNumber = 42;
            arguments.Custom.packageTitle = "Game of Builds";
            </code>
            </example>
        </member>
        <member name="P:Cake.Unity.UnityEditorArguments.SetCustomArguments">
            <summary>
            <para>Custom arguments which can further be processed in Unity Editor script by calling System.Environment.GetCommandLineArgs method. </para>
            <para>They are supplied among other arguments in format "--key=value". </para>
            <para>Expected to be used in conjunction with ExecuteMethod argument. </para>
            </summary>
            <example>
            <code>
            new UnityEditorArguments
            {
                ExecuteMethod = "Build.RunCommandLineBuild",
                SetCustomArguments = x =>
                {
                    x.buildNumber = 42;
                    x.packageTitle = "Game of Builds";
                },
            };
            </code>
            </example>
        </member>
        <member name="T:Cake.Unity.UnityEditorDescriptor">
            <summary>
            Information about Unity Editor.
            </summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorDescriptor.Version">
            <summary>Unity version.</summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorDescriptor.Path">
            <summary>Path to executable.</summary>
        </member>
        <member name="P:Cake.Unity.UnityEditorSettings.RealTimeLog">
            <summary>
            <para>Forwards log file to output in real time.</para>
            <para>Requires LogFile argument to be specified.</para>
            </summary>
        </member>
    </members>
</doc>
